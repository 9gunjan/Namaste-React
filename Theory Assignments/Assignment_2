Q. What is `NPM`?

Firstly, NPM doesn't stand for Node Package Manager. There is no official name for NPM.
npm (Node Package Manager) is a package manager for JavaScript and Node.js applications. It is the default package manager for Node.js,and it plays a crucial role in managing dependencies, libraries, and scripts in JavaScript projects. npm is the world's largest software registry. Open source developers from every continent use npm to share and borrow packages, and many organizations use npm to manage private development as well.

Because our React App is powered by a lot of things, lot of packages. Suppose, we have to minify it, we have to bundle things up, suppose we have to remove console.log suppose we have to optimize our app. For that we need a lot of helper packages. Those helper packages come inside NPM.

To initialise npm - NPM INIT
To install a package - NPM INSTALL <PACKAGE NAME>
To install Parcel - npm install -D parcel
(-D basically means we are installing it for development and not production)Installing as a dev dependency.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `Parcel/Webpack`? Why do we need it?

Parcel and Webpack are both build tools that are commonly used in modern web development to bundle, optimize, and manage the various assets that make up a web application. While they serve similar purposes, they have some differences in their approach and configuration.

We need them because of the following reasons: 

Bundling: Modern web applications often consist of numerous JavaScript, CSS, and other assets. Build tools bundle these assets into a smaller number of files, reducing the number of HTTP requests and improving load times.

Optimization: Build tools can optimize assets by minifying code, compressing images, and eliminating unused code. This helps reduce the size of files sent to the browser.

Code Transformation: Tools like Babel, which can be integrated with both Parcel and Webpack, enable developers to write code using the latest JavaScript features and have it transpiled to be compatible with older browsers.

Dependency Management: Build tools manage dependencies, ensuring that the correct versions of libraries are used and that circular dependencies are handled appropriately.

Hot Module Replacement (HMR): Both Parcel and Webpack support HMR, allowing developers to see changes in the browser without a full page reload, speeding up the development process.

Code Splitting: Code splitting is essential for larger applications. It allows you to load only the code necessary for the current page, reducing initial load times.

In summary, build tools like Parcel and Webpack simplify the development and deployment of modern web applications by handling asset bundling, optimization, dependency management, and other tasks. The choice between them often depends on project complexity and personal preference, with Parcel offering a simpler setup and Webpack providing extensive configurability and a larger ecosystem.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What Parcel is doing?

* It performs HMR. HMR is Hot Module Replacement(kind of live server which is updating the browser automatically).Parcel is a beast.

*Parcel will keep a track of the files which you are updating .
 How does Parcel detect the changes and updates the browser? - There is something knowns as "File Watcher Algorithm" is written in C++.

*Parcel needs "space" to do all the work it does. So, it creates its own space which is Parcel Cache.

*There is a 'dist' folder also, which keeps the files minified for us.
There is another command which we can give - npx parcel build index.html(for Production)
This will minify our file and it will push this build in the 'dist' folder.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `.parcel-cache`?

Parcel needs "space" to do all the work it does. So, it creates its own space which is Parcel Cache.
The .parcel-cache directory is a folder that is automatically generated by the Parcel bundler tool when you build or develop a web application using Parcel. It is used to cache intermediate build artifacts and dependencies to improve build performance.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `npx` ?

NPX means execute using Npm.

npx is a command-line tool that comes bundled with Node.js, starting from version 5.2.0. It is used for executing Node.js packages directly, without the need to install them globally or locally. npx is often used to run commands from packages that are either not globally installed or are dependencies of a project.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is difference between `dependencies` vs `devDependencies`

-Deployment: dependencies are installed when you deploy your application to a production environment, ensuring that your production code has all the necessary runtime dependencies. devDependencies are not included in production 
 deployments, reducing the size and complexity of the deployed code.
-devDependencies are used during the development process to support tasks such as testing and code compilation/transpilation. They are not typically used by the end-users of the application.
-All packages that my project needs is a dependency. It means my project is dependent on something and that something is a dependency.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is Tree Shaking?

REMOVING UNWANTED CODE
Tree shaking is a technique used in modern JavaScript build tools and bundlers, like Webpack, Rollup, and Parcel, to eliminate dead or unused code (i.e., "deadwood") from your final bundle. It is particularly valuable for optimizing the size of JavaScript bundles in web applications, resulting in smaller file sizes and faster load times for end-users.

The term "tree shaking" is derived from the idea of "shaking" a tree to make dead leaves (unused code) fall off while keeping the live leaves (used code). In the context of JavaScript, it refers to the process of identifying and removing code that is not reachable or used in your application.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is Hot Module Replacement?

-It is kind of live server which is updating the browser automatically.
-HMR enables developers to see the results of their code changes almost instantly, typically within a matter of milliseconds, without having to refresh the entire page. This rapid feedback loop significantly speeds up the development process.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. List down your favourite superpowers of Parcel and describe any 3 of them in your own words

-Creates a server for u.
-HMR - Hot Module Replacement
-File Watcher Algorithm
-Bundling
-Minify
-Cleaning our code (console.log)
-Dev and Production build
-Super fast build algorithm
-What's the heaviest thing to load in a web app -media(images)-it minifies ur images also
-Caching while development (building time kam hota jaata h as it caches)
-Compression - remove ur things
-Takes care of older versions of browser(compatible)
-It adds pollyfills
-Parcel gives our app to host on https i.e. https on dev. If parcel was not there it would be http.
-Parcel manages port no. also.
-We should put Parcel-cache folder in .gitignore(because anything which can be autogenerated should be put inside .gitignore)
-Parcel uses 'CONSISTENT HASHING' algorithm to do all that bundling.
-Parcel is a 'zero-config bundler'.(We don't need a lot of configuration , if we install webpack or any other bundler we'll need to have a lot of other configuration and that too-too many)
-Tree Shaking(explained already in prev ques)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `.gitignore`? What should we add and not add into it?

In general, .gitignore is used to exclude files and directories that are not essential to the project's source code and that should not be shared among collaborators. It helps keep the repository clean, reduces its size, and ensures that sensitive or transient files do not get committed to version control.

       What to Add to .gitignore: Anything which can be autogenerated will be put inside .gitignore.
<_________________________________________________________________________________________________________>

-Node modules( because they can be easily regenerated based on the package.json file.)
-Parcel-cache (Exclude temporary or cache files generated by your development environment, such as editor-specific files or build artifacts.)
-dist folder (Build Output: Ignore build output directories, as they can be regenerated from the source code.)

                                         What NOT to Add to .gitignore
<_________________________________________________________________________________________________________>

-Source Code: Do not add your source code files to .gitignore. Source code is what you want to track and version control with Git.
-Configuration Files: Do not add essential configuration files (e.g., .gitconfig, .gitignore itself) to .gitignore. These files are necessary for Git to function correctly.
-Dependencies (except node_modules): You should not typically add dependencies to .gitignore. node_modules is a notable exception due to its size and the fact that dependencies can be easily regenerated.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is the difference between `package.json` and `package-lock.json`

package.json and package-lock.json are two related but distinct files commonly used in Node.js projects for managing dependencies and specifying project metadata.

~~~~package.json~~~~:

Purpose: package.json is a metadata file that defines essential information about a project. It includes project metadata such as the project name, version, description, author, and license. Additionally, it lists the project's dependencies, scripts, and other configuration settings.

Dependencies: It specifies both runtime dependencies (dependencies) and development dependencies (devDependencies) for the project. Runtime dependencies are packages required for the application to run in production, while development dependencies are packages needed for development and testing but not for production.

Maintained by Developers: Developers manually update package.json to add, update, or remove dependencies or scripts. It is the primary configuration file for a Node.js project and is intended to be human-readable and editable.

Version Ranges: Dependencies listed in package.json typically include version ranges (e.g., "^1.2.3") to indicate which versions of the dependencies are acceptable. When you run npm install, it reads package.json to fetch and install the specified dependencies.

~~~~package-lock.json~~~~:

Purpose: package-lock.json is an automatically generated and machine-readable file that provides an exact, deterministic snapshot of the dependency tree for a project. It records the specific versions of all dependencies (including nested dependencies) used in the project, along with their respective integrity hashes.

Dependency Resolution: It is used by npm to ensure that the same versions of packages are installed across different environments and by different developers. This eliminates the "works on my machine" problem by guaranteeing that all installations of the project use the exact same versions of packages.

Automatically Generated: package-lock.json is automatically generated and updated by npm whenever you install or update dependencies using npm install. It is intended to be machine-managed and is not meant for manual editing.

Locks Down Versions: By recording the specific versions and integrity hashes of dependencies, package-lock.json prevents unexpected or unintentional updates to packages. It ensures that the project's dependencies are consistent and reproducible.

In summary, package.json is a human-readable configuration file where you specify your project's metadata, dependencies, and scripts. On the other hand, package-lock.json is a machine-generated file that locks down and records the specific versions of dependencies used in the project to ensure reproducible builds. Both files are important in Node.js projects, with package-lock.json providing greater control over dependency versions and preventing version mismatches.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Why should I not modify `package-lock.json`?

You should generally avoid manually modifying the package-lock.json file in project for several important reasons:

Deterministic Dependency Resolution: The primary purpose of the package-lock.json file is to provide a deterministic and reproducible snapshot of the dependency tree for your project. It records the specific versions of all dependencies, including nested dependencies, along with their integrity hashes. This ensures that all developers and environments working on the project use the exact same versions of packages.

Version Consistency: Modifying package-lock.json can lead to version inconsistencies. If you manually update or change the versions of dependencies in the package-lock.json file, you may introduce incompatibilities or conflicts that can be challenging to resolve. This can result in unexpected runtime errors or behavior differences across environments.

In summary, while it may be tempting to manually edit package-lock.json to address specific issues or make changes, doing so can introduce complexity, errors, and security risks. It's best to rely on the package manager's dependency management capabilities to maintain a reliable and consistent project environment.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `node_modules` ? Is it a good idea to push that on git?

node_modules is a directory that contains all the npm packages (JavaScript libraries and modules) and their dependencies required for a project to run. This directory is created and populated when you use the npm or yarn package manager to install the project's dependencies. Each package within node_modules typically includes the JavaScript code, along with any associated assets (such as CSS, images, or binary files).

In most cases, it is not a good idea to push the node_modules directory to your Git repository. Here are several reasons why:

-> Size: The node_modules directory can be quite large, especially for projects with many dependencies. Including it in your Git repository will significantly increase the repository's size, making it slower to clone and more cumbersome to manage.

-> Version Control Overhead: Storing node_modules in version control is redundant because the same dependencies can be installed on any machine using the package.json and package-lock.json files. Version control systems like Git are not designed to handle binary or generated files efficiently.

-> Security: Some dependencies may contain sensitive or private information (e.g., API keys, credentials) that you don't want to expose in your repository. By excluding node_modules, you reduce the risk of leaking such information.

-> Maintenance: Managing changes to the node_modules directory in Git can be challenging and prone to conflicts, especially when multiple developers are working on the project. It's better to let the package manager handle dependency updates.

Instead of pushing node_modules to Git, follow these best practices:

Include package.json and package-lock.json: Commit the package.json and package-lock.json files to your Git repository. These files specify the project's dependencies and their exact versions, allowing anyone to reproduce the exact dependency tree.

Add .gitignore: Use a .gitignore file to specify that the node_modules directory should be ignored by Git. This prevents it from being added to the repository.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is the `dist` folder?

The dist folder is a convention used to organize and package the production-ready version of a software project. It contains optimized code and assets for deployment, making it easier to manage and distribute applications and websites.(It keeps the minified files for us)

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. What is `browserlists`

Through browserlists we can make our React app work on selective browser versions. Eg: "browserlist" : [last 2 chrome versiosn" ] 
So, it will only work upto last 2 vcersions of chrome only.

Browserslist is a tool used to specify the range of target browsers and their versions in web development projects. 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



