Q: What is JSX?

JSX stands for "Javascript XML" and it's a way to write HTML-LIKE(but not HTML HTMl in Javascript) within your javascript code when you are building web applications with React or other similar libraries or frameworks.
Under the hood, tools like REact will transform this jsx code into regular JS to render it in the browser.

Now a very imp. and useful point on how jsx works or executes?
JSX => React.createElement => Object => HTML(DOM).
Babel understands your jsx and converts it to React.createElement behind the scenes.

Example 1 using JSX:
____________________

const myElement = <h1>I Love JSX!</h1>;
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

Example 2 Without JSX:
______________________

const myElement = React.createElement('h1', {}, 'I do not use JSX!');
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(myElement);

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q: Superpowers of JSX.

1. Readability: JSX resembles HTML, which is familiar to most web developers. This makes your code more readable and easier to understand, especially when defining complex UI structures.
2. Maintainability, less code, Developer friendly
3. Using JSX, you can write markup inside Javascript, providing you with a superpower to write logic and markup of a component inside a single .jsx file. JSX is easy to maintain and debug.

Example
function greeting(user) {
//JSX
  return <h1>{user}, How are you!!!</h1>;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q: Role of type attribute in script tag? What options can I use there?

The type attribute specifies the type of the script. The type attribute identifies the content between the <script> and </script> tags. It has a Default value which is “text/javascript”.

type attribute can be of the following types:
-text/javascript : It is the basic standard of writing javascript code inside the <script> tag.
Syntax
<script type="text/javascript"></script>
-text/ecmascript : this value indicates that the script is following the EcmaScript standards.
-module: This value tells the browser that the script is a module that can import or export other files or modules inside it.
-text/babel : This value indicates that the script is a babel type and required bable to transpile it.
-text/typescript: As the name suggest the script is written in TypeScript.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q: {TitleComponent} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX.

The Difference is stated below:

{TitleComponent}: This value describes the TitleComponent as a javascript expression or a variable. The {} can embed a javascript expression or a variable inside it.
<TitleComponent/> : This value represents a Component that is basically returning Some JSX value. In simple terms TitleComponent a function that is returning a JSX value. A component is written inside the {<  />} expression.
<TitleComponent></TitleComponent> : <TitleComponent /> and <TitleComponent></TitleComponent> are equivalent only when < TitleComponent /> has no child components. The opening and closing tags are created to include the child components.

Example
<TitleComponent>
    <FirstChildComponent />
    <SecondChildComponent />
    <ThirdChildComponent />
</TitleComponent>
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
